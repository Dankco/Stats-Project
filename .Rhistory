sum((predictions - B.test$Birth.Weight..g.)^2)/length(B.test$Birth.Weight..g.)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
names(model.ridge)
summary(model.ridge)
plot(model.ridge)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
summary(model.ridge)
plot(model.ridge)
knitr::opts_chunk$set(echo = TRUE)
set.seed(12)
cv.output=cv.glmnet(x,y,alpha=0)
plot(cv.output)
qplot(log(cv.output$lambda),cv.output$cvsd)
set.seed(12)
cv.output=cv.glmnet(x,y,alpha=0)
plot(cv.output)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
model.ridge=cv.glmnet(x,y,alpha=0, lambda=lambda.v)
summary(model.ridge)
plot(model.ridge)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coeff(model.ridge)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coef(model.ridge)
qplot(lambda.v, coefficients)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coef(model.ridge)
qplot(lambda.v, coefficients)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coef(model.ridge)
ggplot(aes(lambda.v, coefficients)) + geom_line()
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coef(model.ridge)
ggplot(lambda.v, coefficients)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coefficients <- coef(model.ridge)
cbind(lambda.v, coefficients/least_squares$coefficients)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)}
ls2=c()
for (i in 1:100){ ls2=c(ls2, my.l2(coeffs[-c(1,2),i]))}
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)}
ls2=c()
for (i in 1:100){ ls2=c(ls2, my.l2(coeffs[-c(1,2),i]))}
#plot(ls2~lambda.v)
qplot(lambda.v,ls2)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)}
ls2=c()
for (i in 1:100){ ls2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(least_squares$coefficients))}
#plot(ls2~lambda.v)
qplot(lambda.v,ls2)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ls2=c()
for (i in 1:100){
ls2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ls2)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
summary(least_squares)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ls2)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
y = B.train$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
model.ridge=glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ls2)
model.ridge <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
summary(model.ridge)
plot(model.ridge)
model.ridge <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
model.ridge$lambda
plot(model.ridge)
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
best_lambda <- cv.out$lambda.min
best_lambda
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.ridge,s=best_lambda,type="coefficients")
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.ridge,s=best_lambda,type="coefficients")
model.lassoglmnet(x,y,alpha=1, lambda=lambda.v)
model.lassoglmnet(x,y,alpha=1, lambda=lambda.v)
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
plot(model.lasso)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.lasso,newx=test.x ,s=best_lambda,type="response")
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
test.x = model.matrix(Birth.Weight..g.~.,data=B.test)
y = B.train$Birth.Weight..g.
test.y = B.test$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
model.ridge <- glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ls2)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.lasso,newx=test.x ,s=best_lambda,type="response")
sum((predictions - test.y)^2)/length(predictions)
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.ridge,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.lasso,newx=test.x ,s=best_lambda,type="response")
sum((predictions - test.y)^2)/length(predictions)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
test.x = model.matrix(Birth.Weight..g.~.,data=B.test)
y = B.train$Birth.Weight..g.
test.y = B.test$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
model.ridge <- glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ls2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ls2)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
test.x = model.matrix(Birth.Weight..g.~.,data=B.test)
y = B.train$Birth.Weight..g.
test.y = B.test$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
model.ridge <- glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ratio_of_L2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ratio_of_L2)
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
plot(model.lasso)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.lasso,newx=test.x ,s=best_lambda,type="response")
sum((predictions - test.y)^2)/length(predictions)
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
births <- read.csv('birthsnewone.csv')
set.seed(123456789)
i=1:dim(births)[1]
i.train<-sample(i,5000,replace=FALSE)
B.train=births[i.train, ]
B.test = births[-i.train, ]
# B.train[sapply(B.train, is.character)] <- lapply(B.train[sapply(B.train, is.character)], factor)
all_model <- lm(Birth.Weight..g.~., data = B.train)
predictions <- predict(all_model)
sum((predictions - B.train$Birth.Weight..g.)^2)/length(B.train$Birth.Weight..g.)
predictions <- predict(all_model, newdata = B.test)
sum((predictions - B.test$Birth.Weight..g.)^2)/length(B.test$Birth.Weight..g.)
summary(all_model)
backward <- step(all_model, direction = "backward", scope = formula(all_model), k=log(nrow(B.train)))
backward$anova
reduced_model <- lm(Birth.Weight..g.~Plurality.of.birth + Date.LBirth + Month.LBirth +
Weeks + Birth.weight.group + Father.Minority + Smoker + Wt.Gain, data = B.train)
summary(reduced_model)
predictions <- predict(reduced_model)
sum((predictions - B.train$Birth.Weight..g.)^2)/length(B.train$Birth.Weight..g.)
predictions <- predict(reduced_model, newdata = B.test)
sum((predictions - B.test$Birth.Weight..g.)^2)/length(B.test$Birth.Weight..g.)
i=seq(10,-2,length=100)
lambda.v=10^i
x = model.matrix(Birth.Weight..g.~.,data=B.train)
test.x = model.matrix(Birth.Weight..g.~.,data=B.test)
y = B.train$Birth.Weight..g.
test.y = B.test$Birth.Weight..g.
library(glmnet)
library(ggplot2)
least_squares <- lm(y~x)
model.ridge <- glmnet(x,y,alpha=0, lambda=lambda.v)
coeffs <- coef(model.ridge)
my.l2=function(betas){#calculate l2 norm
sum(betas^2)
}
ratio_of_L2=c()
for (i in 1:100){
ratio_of_L2=c(ratio_of_L2, my.l2(coeffs[-c(1,2),i])/my.l2(na.omit(least_squares$coefficients)))
}
qplot(lambda.v,ratio_of_L2)
cv.out <- cv.glmnet(x,y,alpha=0, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.ridge,s=best_lambda,type="coefficients")
predictions <- predict(model.ridge,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.ridge,newx=test.x ,s=best_lambda,type="response")
sum((predictions - test.y)^2)/length(predictions)
model.lasso <- glmnet(x,y,alpha=1, lambda=lambda.v)
plot(model.lasso)
cv.out <- cv.glmnet(x,y,alpha=1, lambda=lambda.v)
plot(cv.out)
best_lambda <- cv.out$lambda.min
best_lambda
predict(model.lasso,s=best_lambda,type="coefficients")
predictions <- predict(model.lasso,newx=x ,s=best_lambda,type="response")
sum((predictions - y)^2)/length(predictions)
predictions <- predict(model.lasso,newx=test.x ,s=best_lambda,type="response")
sum((predictions - test.y)^2)/length(predictions)
SA_train <- read.csv('TrainSAData2.csv')
SA_train <- read.csv('TrainSAData2.csv')
SA_test <- read.csv('TestSAData2NoY.csv')
dim(SA_train)
dim(SA_test)
colnames(SA_train[, sapply(SA_train, is.numeric)])
colnames(SA_train[, sapply(SA_train, function (x) !is.numeric(x))])
sapply(SA_train, function(x) sum(is.na(x)))
sapply(SA_train, function(x) sum(is.na(x))/length(x))
sapply(SA_test, function(x) sum(is.na(x)))
sapply(SA_test, function(x) sum(is.na(x))/length(x))
sum(SA_train$Alcoholic.Status == 'Y')
sum(SA_train$Alcoholic.Status == 'Y')/length(SA_train$Alcoholic.Status)
sum(SA_train$Alcoholic.Status == 'N')
sum(SA_train$Alcoholic.Status == 'N') /length(SA_train$Alcoholic.Status)
ggplot(SA_train, aes(Smoking.Status, fill=Alcoholic.Status)) + geom_bar(position = "fill") + scale_y_continuous(labels = scales::percent)
library(ggplot2)
library(GGally)
for (i in 1:28) {
SA_train[,i][is.na(SA_train[,i])] <- mean(SA_train[,i], na.rm = TRUE)
}
for (i in 1:27) {
SA_test[,i][is.na(SA_test[,i])] <- mean(SA_test[,i], na.rm = TRUE)
}
imputeFunc <- function(x){
x <- as.factor(x)
sample(levels(x), sum(is.na(x)), replace = TRUE,
prob = as.numeric(table(x))/sum(!is.na(x)))
}
SA_train[sapply(SA_train, is.na)]  <- unlist(sapply(SA_train, imputeFunc))
SA_test[sapply(SA_test, is.na)]  <- unlist(sapply(SA_test, imputeFunc))
for (i in c('height', 'weight', 'age', 'hemoglobin')) {
print(ggplot(SA_train, aes(x=.data[[i]], color = Alcoholic.Status)) +
geom_density())
}
library(ggplot2)
library(GGally)
for (i in 1:28) {
SA_train[,i][is.na(SA_train[,i])] <- mean(SA_train[,i], na.rm = TRUE)
}
for (i in 1:27) {
SA_test[,i][is.na(SA_test[,i])] <- mean(SA_test[,i], na.rm = TRUE)
}
imputeFunc <- function(x){
x <- as.factor(x)
sample(levels(x), sum(is.na(x)), replace = TRUE,
prob = as.numeric(table(x))/sum(!is.na(x)))
}
SA_train[sapply(SA_train, is.na)]  <- unlist(sapply(SA_train, imputeFunc))
SA_test[sapply(SA_test, is.na)]  <- unlist(sapply(SA_test, imputeFunc))
ggplot(SA_train, aes(Smoking.Status, fill=Alcoholic.Status)) + geom_bar(position = "fill") + scale_y_continuous(labels = scales::percent)
ggplot(SA_train, aes(sex, fill=Alcoholic.Status)) + geom_bar(position = "fill") + scale_y_continuous(labels = scales::percent)
lr <- glm(factor(Alcoholic.Status)~., family = binomial(), data = SA_train)
summary(lr)
report_results <- function(model) {
train_probs <- predict(model, data=SA_train, type='response')
train_pred_logit <- rep('Y', length(train_probs))
train_pred_logit[train_probs<=0.5] <- 'N'
print(table(train_pred_logit, SA_train$Alcoholic.Status))
print(mean(train_pred_logit!=SA_train$Alcoholic.Status))
test_probs <- predict(model, data= SA_train, newdata = SA_test, type='response')
test_pred_logit <- rep('Y', length(test_probs))
test_pred_logit[test_probs<=0.5] <- 'N'
solution <- data.frame(Alcoholic.Status=test_pred_logit)
write.csv(solution, 'solution.csv')
}
report_results(lr)
report_results <- function(model) {
train_probs <- predict(model, data=SA_train, type='response')
train_pred_logit <- rep('Y', length(train_probs))
train_pred_logit[train_probs<=0.5] <- 'N'
print(table(train_pred_logit, SA_train$Alcoholic.Status))
print(mean(train_pred_logit!=SA_train$Alcoholic.Status))
test_probs <- predict(model, data= SA_train, newdata = SA_test, type='response')
test_pred_logit <- rep('Y', length(test_probs))
test_pred_logit[test_probs<=0.5] <- 'N'
solution <- data.frame(Alcoholic.Status=test_pred_logit)
write.csv(solution, 'solution.csv')
}
report_results(lr)
report_results <- function(model) {
train_probs <- predict(model, data=SA_train, type='response')
train_pred_logit <- rep('Y', length(train_probs))
train_pred_logit[train_probs<=0.5] <- 'N'
print(table(train_pred_logit, SA_train$Alcoholic.Status))
print(mean(train_pred_logit!=SA_train$Alcoholic.Status))
test_probs <- predict(model, data= SA_train, newdata = SA_test, type='response')
test_pred_logit <- rep('Y', length(test_probs))
test_pred_logit[test_probs<=0.5] <- 'N'
solution <- data.frame(Alcoholic.Status=test_pred_logit)
write.csv(solution, 'solution.csv')
}
report_results(lr)
library(ggplot2)
library(GGally)
for (i in 1:28) {
SA_train[,i][is.na(SA_train[,i])] <- mean(SA_train[,i], na.rm = TRUE)
}
for (i in 1:27) {
SA_test[,i][is.na(SA_test[,i])] <- mean(SA_test[,i], na.rm = TRUE)
}
imputeFunc <- function(x){
x <- as.factor(x)
sample(levels(x), sum(is.na(x)), replace = TRUE,
prob = as.numeric(table(x))/sum(!is.na(x)))
}
SA_train[sapply(SA_train, is.na)]  <- unlist(sapply(SA_train, imputeFunc))
SA_test[sapply(SA_test, is.na)]  <- unlist(sapply(SA_test, imputeFunc))
ggpairs(SA_train)
